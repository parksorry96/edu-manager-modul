# EduManager API Application 설정

spring:
  # 활성 프로파일 설정
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  # 애플리케이션 정보
  application:
    name: edumanager-api
  
  # PostgreSQL 데이터소스 설정
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/edumanager}
    username: ${SPRING_DATASOURCE_USERNAME:edumanager}
    password: ${SPRING_DATASOURCE_PASSWORD:edumanager123}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20                    # 최대 연결 풀 크기
      minimum-idle: 5                          # 최소 idle 연결 수
      connection-timeout: 30000                # 연결 타임아웃 (30초)
      idle-timeout: 600000                     # idle 타임아웃 (10분)
      max-lifetime: 1800000                    # 최대 연결 생명 주기 (30분)
      leak-detection-threshold: 60000          # 연결 누수 감지 임계값 (1분)
  
  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
    show-sql: ${SPRING_JPA_SHOW_SQL:true}
    properties:
      hibernate:
        format_sql: ${SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL:true}
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          time_zone: Asia/Seoul               # 시간대 설정
    open-in-view: false                       # OSIV 비활성화 (성능 최적화)
  
  # MongoDB 설정
  data:
    mongodb:
      uri: ${SPRING_DATA_MONGODB_URI:mongodb://admin:admin123@localhost:27017/edumanager?authSource=admin}
      auto-index-creation: true               # 자동 인덱스 생성
    
    # Redis 설정
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}
      password: ${SPRING_DATA_REDIS_PASSWORD:redis123}
      timeout: 2000ms                         # 연결 타임아웃
      lettuce:
        pool:
          max-active: 8                       # 최대 활성 연결 수
          max-idle: 8                         # 최대 idle 연결 수
          min-idle: 0                         # 최소 idle 연결 수
          max-wait: -1ms                      # 연결 대기 시간
  
  # Kafka 설정
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${SPRING_KAFKA_CONSUMER_GROUP_ID:edumanager-group}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.edumanager"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  
  # 캐시 설정
  cache:
    type: redis
    redis:
      time-to-live: 600000                    # 캐시 TTL (10분)

# 서버 설정
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api                        # API 기본 경로
  error:
    include-stacktrace: never                 # 스택 트레이스 숨김 (운영환경)

# JWT 설정
jwt:
  secret: ${JWT_SECRET:edumanager-secret-key-for-development-only}
  expiration-ms: ${JWT_EXPIRATION_MS:86400000}  # 24시간

# 로깅 설정
logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:INFO}
    com.edumanager: ${LOGGING_LEVEL_COM_EDUMANAGER:DEBUG}
    org.springframework.security: ${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY:INFO}
    org.hibernate.SQL: DEBUG                 # SQL 쿼리 로깅
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE  # 파라미터 바인딩 로깅
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Actuator 설정 (헬스체크, 메트릭스)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  info:
    env:
      enabled: true

# OpenAPI/Swagger 설정
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method

---
# 개발 환경 프로파일
spring:
  config:
    activate:
      on-profile: dev
  
  # 개발환경 JPA 설정
  jpa:
    hibernate:
      ddl-auto: update                        # 개발환경에서는 스키마 자동 업데이트
    show-sql: true
  
  # 개발환경 로깅
logging:
  level:
    com.edumanager: DEBUG
    org.springframework.security: DEBUG

---
# 운영 환경 프로파일
spring:
  config:
    activate:
      on-profile: prod
  
  # 운영환경 JPA 설정
  jpa:
    hibernate:
      ddl-auto: validate                      # 운영환경에서는 스키마 검증만
    show-sql: false
  
  # 운영환경 로깅
logging:
  level:
    root: WARN
    com.edumanager: INFO